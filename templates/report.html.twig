{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="nav sticky">
        <a class="nav-btn small-btn" href="#kmom01">Kmom01</a>
        <a class="nav-btn small-btn" href="#kmom02">Kmom02</a>
        <a class="nav-btn small-btn" href="#kmom03">Kmom03</a>
        <a class="nav-btn small-btn" href="#kmom04">Kmom04</a>
        <a class="nav-btn small-btn" href="#kmom05">Kmom05</a>
        <a class="nav-btn small-btn" href="#kmom06">Kmom06</a>
        <a class="nav-btn small-btn" href="#kmom07">Kmom07</a>
        <a class="nav-btn small-btn" href="#kmom10">Kmom10</a>
    </div>
    <div class="center">
        <h1>Report</h1><br>
        <article>
            <div class="float-left">
            <h2 id="kmom01" class="center">kmom01</h2>

                <ul>
                    <li>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</li>
                    <p>
                        Mina förkunskaper och tidigare erfarenheter om objektorientering kommer från kursen oopython (DV1660), där jag lärde mig grunden till objektorienterad programmering, 
                        hur kodens struktur ändras och många nya begrepp och tankesätt kring hur man kodar med klasser och objekt.
                    </p>

                    <li>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</li>
                    <p>
                        En grundläggande uppfattning om hur klasser och objekt fungerar är ju rekommenderat, men utöver detta så är det mest strukturen som är annorlunda i PHP och Symfony 
                        ramverket som är annorlunda. Eftersom jag inte kodat klasser i PHP än, kan jag inte säga med 100% säkerhet, men angående min tidigare erfarenhet så kommer det nog hänga på att 
                        skapa klasser med konstruktor och metoder, och sedan objekt som är instanser av klassen.
                    </p>

                    <li>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</li>
                    <p>
                        Den är sannerligen klurig, och jag behövde ofta söka upp fel jag fick i kursens discord kanal, eller i övrigt på webben, men jag känner att jag har börjar förstå det mer. 
                        Jag begriper hur routes fungerar, hur jag kan ge dem namn som jag senare kan använda i länkar, hur jag kopplar routes till twig filer, hur .htaccess filen skall fungera, etcetera. 
                        Det är en väldigt unik kodbas och struktur, och jag kan inte kommentera mycket på hur bra den är i jämförelse med annat ännu, eftersom jag bara börjat, och allt är lite klurigt när 
                        man aldrig provat det tidigare!
                    </p>

                    <li>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</li>
                    <p>
                        Med tanke på att jag inte hunnit läsa hela artikeln ännu, kan jag inte lyfta upp delar från slutet, men från det jag jobbat igenom, tycker jag att det är intressant med jämförelserna de drar med 
                        andra programmeringsspråk. Jag har tidigare sett PHP som ett lite mindre avancerat språk än det faktiskt är, och att läsa om möjligheterna att använda mycket av vad jag använt 
                        mig av i oopython kursen, som till exempel rekursion, är väldigt intressant.
                    </p>

                    <li>Vilken är din TIL för detta kmom?</li>
                    <p>
                        Min TIL för detta kmom är hur jag kommer igång med att använda och jobba med Symfony, samt en introduktion till vad jag kan förvänta mig i senare kursmoment. Jag har lärt mig skapa en 
                        webbplats med denna kodbas, hur man skapar routes, kopplar dem till twig filer och så vidare. Jag har byggt en grundlig uppfattning till senare kursmoment, och hur jag skall tänka i framtiden.
                    </p>
                </ul>

            <h2 id="kmom02" class="center">kmom02</h2>

                <ul>
                    <li>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</li>
                    <p>
                        Med objektorienterad kod och användningen av klasser så finns olika relationer mellan olika objekt. Arv och komposition beskriver relationer. Arv, med att en class använder sig utav en annan, 
                        och komposition, att en class är beroende av en annan för att den skall fungera. Interface är jag fortfarande lite osäker på, eftersom jag inte använt mig utav det, men från vad jag läst ser det ut som 
                        en grund eller regel för hur en annan klass skall fungera. Trait är lik en magic function i sättet då den kan skapas utanför en klass, och användas för andra klasser. Jag har inte använt mig utav trait heller, 
                        så min förklaring baseras på min uppfattning från oopython.
                    </p>

                    <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</li>
                    <p>
                        Jag hade extremt många problem med veckans kursmoment. Jag lyckades få en lösning tillslut, men jag är inte nöjd, och jag vet att jag hade kunnat göra mycket annorlunda om jag gjorde om kursmomentet. Problemet ligger mycket 
                        i att jag inte kodat med denna kodbas och struktur innan, så allt är väldigt nytt, vilket leder till många rätt abstrakta fel, som tog en lång tid att fixa. Jag hade mycket problem med mina routes, och hur de skulle hanteras. 
                        Det slutade med att jag skapade två routes för /:number. En /:num och en /page. Jag kunde inte använda /:num när jag skulle använda en input och knapp, och fick då skapa en ny route, eftersom jag var bekant med det i alla fall. 
                        Det har lett till att koden är rätt stökig.
                    </p>

                    <li>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</li>
                    <p>
                        Väldigt bökigt. Jag strular rätt ofta till det och dår ett symfony fel som skrivs väldigt abstrakt, och ofta går det att hitta någon med samma fel online eller på discord, men det händer att man fastnar rätt rejält, och slösar mycket 
                        tid på lösningar som bara leder till ännu fler problem. Jag känner att jag lär mig dock, vilket är bra, men vägen dit är väldigt, väldigt obekant och krånglig.
                    </p>

                    <li>Vilken är din TIL för detta kmom?</li>
                    <p>
                        Mitt TIL för detta kmom är en fördjupning på kursens innehåll, samt att koda lite objektorienterat med PHP. Jag har också lärt mig en hel del om hur kodstrukturen skall vara, samt hur man använder metoder och funktioner i php. 
                        Jag har också fått en fördjupning på routes, med GET och POST, samt hur jag kan använda formulär för att interagera med session och routes. Till sist har jag också lärt mig felhantera och problemsöka bättre i PHP.
                    </p>
                </ul>


            <h2 id="kmom03" class="center">kmom03</h2>
                <ul>
                    <li>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</li>
                    <p>
                        Jo, det tror jag definitivt. Det är alltid bra att ha en grundide om hur man skall ta sig till väga när det kommer till problemlösning, och speciellt med ett programmeringsspråk som jag inte är särskilt bekant med. 
                        Jag tycker därför att det kan hjälpa mycket när det kommer till en tidig visualisering om projektet.
                    </p>

                    <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</li>
                    <p>
                        Jag är rätt så nöjd med min implementation i kmom03. Jag tog min feedback från kmom02, om att jag borde lägga till en game class med spellogiken, och det tycker jag att jag har åstadkommit rätt väl. 
                        Jag känner också att längden på min blackjack kontroller inte är för stor, vilket också är ett plus. Något dåligt var att jag väntade till nästan slutet av uppgiften innan jag körde composer lint, och därmed hade jag 
                        ett hundratal fel jag skulle fixa. Det fick mig att gå tillbaka och ändra mycket, men det köste sig tillslut, även om lösningen nu ser sämre ut. I framtiden skulle jag vilja bli bättre på att testa oftare, och tänka mer 
                        objektorienterat från början, så att jag inte behöver ändra saker i efterhand.
                    </p>

                    <li>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</li>
                    <p>
                        Det är rätt så okej. Mitt främsta problem är hur Symfony ofta ger mig fel som inte finns i min kod. När jag körde valideringen, fick jag fel om dice.php, som inte fanns där. Jag raderade filen, återskapade den, bytte namn 
                        på klassen, vilket tog bort felet i konsolen, men nu får jag felet när jag kör sidan efter jag ändrat någon kod. Det står att dice klassen inte finns, men inget kallar direkt på dice, utan "dices" istället. Sådana fel 
                        verkar vara rätt så vanliga, och det är rätt så irriterande ibland.
                    </p>

                    <li>Vilken är din TIL för detta kmom?</li>
                    <p>
                        Min TIL för detta kmom är mer om hur jag ska tänka objektorienterat, samt en påminnelse om att jag mer ofta bör felsöka, validera och testa min kod. Jag har även lärt mig mycket om hur jag kan lösa felen, och därmed fått en 
                        bättre problemlösningskänsla. Flödesschemat och psuedokoden bidrog också till en förbättrad problemlösningskänsla.
                    </p>
                </ul>

            <h2 id="kmom04" class="center">kmom04</h2>

                <ul>
                    <li>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</li>
                    <p>
                        Jag upplever det som helt okej. Det gick lite bättre när man väl fick till labbmiljön (Men det var lite strul i början, då jag råkade ladda ner det fel och fick ladda om repot.) Jag fick skriva om 
                        metoden temper, eftersom jag med hjälp av testerna insåg att jag hade en konstig logik med min hantering av ess i blackjack. Där var testerna hjälpsamma.
                    </p>
                    <li>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</li>
                    <p>
                        Nej, det gjorde jag inte. Mitt problem var att jag har två metoder i CardGame klassen kvar att testa, men det går inte (Till min uppfattning) att testa session med en phpUnit test. Så jag lämnade en kommentar under mitt 
                        sista test, som informerar att det inte går på grund av att de har att göra med session. Annars har jag lyckats testa alla klasser som har med kortspelet att göra.
                    </p>
                    <li>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</li>
                    <p>
                        Som sagt ovan, är sessiondelarna, till min uppfattning, otestbara, eftersom de kräver att en session initieras, och det går inte att göra med att helt enkelt kalla på SessionInterface som sin egen klass. Men utöver det, 
                        hade jag möjligheten att testa min kod utan några större bekymmer. Eftersom vi i tidigare kursmomentet hade använt oss av composer lint, så var många utav de potentiella felen redan borta, så jag uppfattade det inte som 
                        att min kod var så otestbar.
                    </p>
                    <li>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</li>
                    <p>
                        Ja, som sagt i mitt första stycke, fick jag skriva om metoden temper i CardGame klassen, eftersom min hantering av ess var fel. Det fungerade väl på webbsidan, men i testerna, fick jag för många poäng av ett ess, vilket ledde 
                        till att jag skrev om metoden med en while loop som räknar av varje ess du har i din lek så att det inte blir struligt. Jag fick också ändra om någon return statement, eftersom jag inte fick det resultatet jag förväntade mig, 
                        men det dick snabbt att fixa. Utöver allt detta var koden testbar.
                    </p>
                    <li>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</li>
                    <p>
                        Det är det säkerligen, eftersom testerna kan peka ut potentiella fel i dina metoder, vilket leder till att du skriver om dem, eller lägger till mer logik för att hantera det bättre. Det uppmanar kodaren att koda väl, och 
                        om man använder tester ofta, kan det nog hjälpa med att göra en mer genomgående bra kod.
                    </p>
                    <li>Vilken är din TIL för detta kmom?</li>
                    <p>
                        Min TIL för detta kmom är hur jag kommer igång med och använder phpDoc och phpUnit. I detta kmom har jag fått skriva tester i php med verktyget phpUnit, jag har lärt mig installera det, hur jag förbättrar mina metoder, samt hur 
                        jag kan skriva bättre kod i framtiden. Jag har även lärt mig hur jag kan ladda om mitt repo från github.
                    </p>
                </ul>

            <h2 id="kmom05" class="center">kmom05</h2>

                <ul>
                    <li>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</li>
                    <p>
                        Det gick ganska bra! Jämfört med tidigare kmom, tog jag mig igenom övningen och självaste kursmomentet rätt snabbt. Det var några problem som stack ut, såsom 
                        att jag till exempel råkade göra min "book"-entity fel ett par gånger (då jag första gången glömde inkludera författaren, och andra gången hade ISBN som int, vilket 
                        inte fungerade eftersom det blev för mycket på studentservern.).
                    </p>
                    <li>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</li>
                    <p>
                        Ja faktiskt! När jag höll på att leta efter bilder för böckerna jag lade in i databasen, såg jag att <a href="https://www.adlibris.com/" alt="Adlibris">adlibris<a> 
                        hade ett bra och enkelt gränssnitt för böckerna på deras webbplats. Jag implementerade då "kort" designen i min webbplats, för att få det att se lite bättre ut! 
                        I denna kursen har jag inte satsat riktigt stort på ett fint och användarvänligt gränssnitt, men om jag hade gjort om allt nu, hade jag ändrat t.ex knapparnas färg, 
                        fixat layouten på alla sidor med inputs och så vidare.
                    </p>
                    <li>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</li>
                    <p>
                        Det är intressant. Jag upplever att databaser kan bli rätt långtråkiga ibland, och att arbeta med program som huvudsakligen arbetar med SQL kod, kan bli rätt tråkigt. 
                        Men när det kommer till implementation av CRUD och ORM i en webbplats, blir det mer intressant, eftersom man jobbar med gränssnittet, designen, hur datan från databasen skall 
                        hålla ihop i sidan, och så vidare. Det gör arbetet mer intressant, och bidrar med en grafisk sätt att se sin prestation.
                    </p>
                    <li>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</li>
                    <p>
                        Jag har uppfattat att ORM är ett sätt för objekt orienterad kod att kommunicera med en databas. Det gör det lättare för användaren att istället för att behöva skriva nya SQL-queries, kunna 
                        använda sig utav metoder som fungerar med databasen. Det gör koden mer lättläst och mindre klottrad.
                    </p>
                    <li>Vilken är din TIL för detta kmom?</li>
                    <p>
                        Min TIL för detta kmom är om ORM och hur jag kan koppla min objekt orienterade kod till en databas och jobba mot den. I detta kursmomentet har jag fått lära mig hur det är att 
                        jobba med en databas i OOPHP. Jag har även lärt mig hur jag kan skapa ett bättre gränssnitt för databasens information, samt blivit mer bekväm med POST och GET metoder.
                    </p>
                </ul>

            <h2 id="kmom06" class="center">kmom06</h2>

                <ul>
                    <li>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</li>
                    <p>
                        Jo då, jag tycker PHPmetrics har varit rätt värdefullt. Jag gillar hur lätt det går att se volyme, complexity, coheasion, etc, som kanske är lite svårare att se i Scrutinizer. 
                        Jag gillar hur datan är visad i ett fint sätt grafiskt; speciellt på framsidan. Det är lätt att se saker man själv kan gå och fixa till efterråt, vilket gjorde det lättare att lösa 
                        veckans kmom.
                    </p>
                    <li>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</li>
                    <p>
                        Det gick ganska struligt i början. Jag hade problemet att Scrutinizer ville läsa av hela mitt repo på github, med vendor mappen inkluderat. Därför fick jag i början ett hemskt Scrutinizer 
                        score (6.65), men det gick att fixa ganska lätt. Problemet var att min gitignore och scrutinizer fil läste av tools, vilket ledde till alla felen. Ett fel kvarstod, med att Scrutinizer läste 
                        av src/Kernel som ett fel, vilket jag inte hittade en lösning till. Men annars fick jag min score till 9.97. Badges var också ett trevligt tillägg som lätt kunde implementeras i sidan och README.
                    </p>
                    <li>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</li>
                    <p>
                        Min egna syn på kodkvalitet är att den behövs, ja, och den är bra att kunna lära sig tidigt. Utöver detta är det dock struligt när man implementerar alldeles för många verktyg för detta samtidigt. 
                        I veckans kmom så klagar Scrutinizer att jag inte har else-statements, och när jag lägger till dem, klagar Composer lint på att dem inte bör finnas. Det är sådana saker som kan strula till det, eftersom 
                        alla verktyg verkar ha sin egna ide om vad bra kodkvalitet är. Min syn är att om allt är organiserat nog, och du har uppnått din planerade funktionalitet utan att offra mycket prestanda, så är det 
                        lika bra. Program som talar om kodkvalitet är bra för att fånga bugg och visa småsaker som man kan göra bättre.
                    </p>
                    <li>Vilken är din TIL för detta kmom?</li>
                    <p>
                        Min TIL för detta kmom är hur man använder Scrutinizer och PHPmetrics för att få en överblick över sin kodkvalitet. Jag har lärt mig använda dessa verktyg, och fått en inblick till vad den givna 
                        informationen betyder, samt hur jag kan använda den informationen för att bygga en bättre och smidigare lösning.
                    </p>
                </ul>


            <h2 id="kmom10" class="center">kmom10</h2>

                {# <ul>
                    <li></li>
                    <p></p>
                </ul> #}
        </article>
    </div>
{% endblock %}
