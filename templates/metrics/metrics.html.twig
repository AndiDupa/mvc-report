{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <div class="center">
        <h1>Metrics</h1><br>
    </div>

    <div class="center">
        <h2>Introduktion</h2>
    </div>

    <article class="article">
        <p>
            Denna analysen handlar om att undersöka och analysera kodkvalitet enligt de "6 C:na". Följande är dessa 6 mätvärden:<br><br>
            Codestyle<br>
            Coverage<br>
            Complexity<br>
            Cohesion<br>
            Coupling<br>
            CRAP<br>
        </p>

        <h3 class="center">CodeStyle</h3><br>

        <p>
            CodeStyle beskriver till vilken stil en kodbas följer. Det finns många olika standards som går att följa för, till exempel, PHP, som har i mål att skapa en standardiserad 
            och genomtänkt plan till hur man kodar i just det språket. I denna kodbas, används <a href="https://www.php-fig.org/psr/" alt="php-fig">PHP-fig's regler</a> som grund, samt den generella kodstrukturen som har 
            visats under genomgångarna i kursen MVC. Dessa stilerna följs till en godtycklig standard, då de inte har varit i centralt fokus under kursens gång. En välutvecklad och genomtänkt kodstil, gör det 
            möjligt att ha en mer lättläst och lättanvänd kodbas, som flera individer kan förstå och bidra till. Därav hjälper det till att skapa en enhetlig stil på sättet koden ser ut, och gör den mer standardiserad.
        </p><br>

        <h3 class="center">Coverage</h3><br>

        <p>
            Med coverage menas hur stor andel av din kodbas som täcks av tester. En kodbas utan tester, eller med få tester, har större chans att vara instabil, och därav kan fler oväntade buggar 
            framkomma. Coverage är bra att ha till egenskapade klasser, ty det gör det lättare att se hur koden fungerar, och att upptäcka eventuella fix. Coverage är svårare att nå för importerade delar av projectet, 
            eftersom de är menade som verktyg för din kodbas, och inte att gå igenom tester. I denna kursen, har verktyget <a href="https://phpunit.de/index.html" alt="phpunit">PHPunit</a> använts för att skapa tester. 
            I denna kodbas, används PHPunit för att testa egenskapade klasserna för "Card" och "Dice", som innehåller kod för att initiera småspel. Ju mer tester du har för att analysera din kod, desto högre coverage har du.
        </p><br>

        <h3 class="center">Complexity</h3><br>

        <p>
            Complexity handlar om hur komplex din kod är. Används för många if-satser eller for-loopar, kommer komplexiteten att gå upp. Detta gör koden mer klottrad och svårläst, samt svårare för programmet att initiera. 
            När man når en alldeles för hög complexity bör man skriva om sin kod, dela upp den i mindre bitar eller fler klasser, och minska komplexiteten. I detta project, finns bättre komplexitet på de egenskapade klasserna 
            eftersom möjligheten fanns att senare gå tillbaka, dela upp, samt fixa koden. För att see komplexitet, användes <a href="https://scrutinizer-ci.com/" alt="scrutinizer">Scrutinizer</a> och 
            <a href="https://phpmetrics.github.io/website/" alt="PHPmetrics">PHPmetrics</a> för att analysera kodbasen och identifiera komplexitet. Exempel på klassernas complexity finns nedanför:<br><br>
        </p>

        <li>Card        - Total complexity: 4</li><br>
        <li>CardHand    - Total complexity: 12</li><br>
        <li>CardGraphic - Total complexity: 10</li><br>
        <li>CardGame    - Total complexity: 22</li><br>

        <h3 class="center">Cohesion</h3><br>

        <p>
            Coheasion innebär hur mycket klasserna har att göra för sig själva. En klass med låg coheasion, litar på andra klasser för att inte göra för mycket själv. Genom att dela upp koden i mindre, mer stabila klasser, 
            bidrar det till en lägre coheasion och en bättre strukturerad kod. I detta projectet har några klasser lite för hög coheasion. Exempelvis: 
        </p>

        <li>CardGraphic  - LCOM: 4</li><br>
        <li>ApiRoute     - LCOM: 5</li><br>

        <p>
            Detta visar att dessa klasserna gör alldeles för mycket själva, och hade gynnats om koden delades upp bättre. I ApiRoute, hade ett API directory med mindre API routes innuti fungerat, och i CardGraphic, 
            så hade det gynnats om vissa metoder var i andra klasser istället.
        </p>

        <h3 class="center">Coupling</h3><br>

        <p>
            Coupling är uppdelad i två huvudsakliga delar:<br><br>
            Afferent coupling (AC), är antalet klasser som påverkas av den givna klassen.<br>
            Efferent coupling (EC), är antalet klassen som den givna klassen påverkas av.<br><br>
            Coupling handlar därav att skapa en balans av dependencies för dina klasser. Enstaka klasser bör inte påverka en alldeles för stor mängd andra, och tvärtom. Om en sådan relation skapas, kan det vara 
            svårt att fixa eventuella fel, eftersom den enstaka förälderklassen som är ansvarig för grunddatan kan ha fel. Nedanför är några av kodbasens klassers coupling:
        </p>

        <li>CardHand            - AC: 6 | EC: 1</li><br>
        <li>CardGame            - AC: 4 | EC: 5</li><br>
        <li>LibraryController   - AC: 0 | EC: 6</li><br>

        <h3 class="center">CRAP</h3><br>

        <p>
            CRAP (Change Risk Analyzer and Predictor) visar ett mättal på risken om att ändra en metod som används av något annat. Ett högt index av CRAP, visar att om din metod ändras, kommer förmodligen ditt program 
            inte att fungera som det är menat längre. CRAP är därav nära till med hög-komplexa klasser och metoder, eftersom en komplex metod, som är mycket linjär i sättet den är kodad, kan inte ändras lätt utan att bygga 
            om en större del av metoden/klassen. CRAP mäts med mängden komplexitet i metoder jämfört med antal testfall för metoden. Om en högkomplex metod inte går att testa i många fall, visar den en högre risk att inte fungera.
            I tidigare kmom, hade den egenskapade metoden "temper" i klassen "CardGame", en dålig komplexitet, vilket ledde till att den var svår att testa. Det fanns fler if-satser, som skulle se om det fanns ess i spelaren eller husets 
            kort, men det hanterades på ett struligt sätt, och därav gick inte att ändra eller testa väl. Då skrevs metoden om igen, för att skapa en mer testbar och mindre komplex metod.
        </p>
    </article>

    <div class="center">
        <h2>Phpmetrics</h2>
    </div>

    <article class="article">
        <p>
            1. PHPmetrics visar att denna kodbas inte har tillräckligt stor andel tester för andra klasser. Detta är förståeligt, ty många av klasserna är från genomgångar, och så vidare, men det visar att 
            webbsidan i helhet inte är testad väl, och slarvig på många ställen, vilket kan öka complexity och CRAP-skalan. Exempel på klasser med specifikt dålig komplexitet är "CardGameController" (18 cycl), "ApiRoute" (21 cycl), och "CardGame" (17 cycl).
            Problemet här, är att koden inte är uppdelad väl. Den kan vara bra kodad och väl genomtänkt, men eftersom de är stora i volym, betyder det att de blir svårare att testa i helhet, slarvigare, och mer komplexa. En förbättring hade varit att 
            splittra upp dem mer, och till exempel skapa enstaka ApiRoute filer för varje kmom.<br><br>

            2. PHPmetrics visar att coheasion är dålig för vissa klasser i kodbasen. Ett par klasser innehåller onödiga funktioner som hade bättre passats någon annan stans. Exempel på dessa är "CardGame" (4 LCOM), och "CardGraphic" (4 LCOM). Anledningen till 
            varför dessa är så pass höga i skalan, är för att CardGame hanterar mycket av datan som sker i spelet. Den var tänkt som en klass för att minska koden i själva controllern, och därav, innehåller den metoder såsom setScore och createDecks, som 
            hade kunnat fungera i controllern istället. Utöver detta finns klassen CardGraphic, som innehåller grafikdata kring korten, dess värde, och dess UNICODE värde. CardGraphic innehåller metoder såsom cardUnicode, cardPoint och temper, vilket är 
            metoder som redan finns och används i andra klasser, vilket gör dem onödiga i cardGraphic.<br><br>

            3. PHPmetrics visar att volymen på många av klasserna är onödigt stora, och hade gynnats med att vara mindre och mer uppdelat. Volym indexet på "ApiRoute" (2041,05), "CardGraphic" (1892,35), "CardGameController" (1768,8), och "DiceGameController" (1402,14) 
            visar att volymen för specifikt kontrollerna hade kunnat vara mycket mindre. Kontrollerna har i uppgift att fungera som pilar eller skyltar, som säger till vad varje route ska till och vad de skall exekvera för någon kod. Problemet ligger när controllers 
            håller för mycket kod, som istället hade kunnat göras innuti en klass. Om en kontroller med många olika routes, behöver exekvera en del kod i varje route, blir volymen genast väldigt stor. Om man har en route som inte går att dela upp väl, skall man försöka 
            bilda klasser som kan hantera koden som är till för routen.
        </p>

        <img class="image-article" src="{{ asset('img/screencapture1.png') }}" alt="Bild på PHPmetrics">
    </article>

    <div class="center">
        <h2>Scrutinizer</h2>
    </div>

    <article class="article">
        <p>
            1. Scrutinizers coverage bygger på samma data som undersöktes i PHPmetrics. Anledningen till varför coverage är så låg i procent när det kommer till Scrutinizer, är att den analyzerar hela repository:t. Det vill säga att alla egenskapade filer samt dependencies 
            räknas med. Detta bidrar till att coverage är låg, eftersom det inte finns något sätt att skapa tester för alla dependencies (107 enligt PHPmetrics). När det kommer till dem egenskapade klasserna såsom Card, CardHand, CardGame och CardGraphics, är datan annorlunda. 
            Card klassen har 100% i test coverage. Detsamma med CardHand- och CardGraphic-klasserna. CardGame har 63,64% i test coverage, men det går att förklara med faktumet att det krävs förmågan att testa skapelser av session för varje test, vilket inte gick att få till. 
            Coverage i Scrutinizer hänger därav ihop med datan från till exempel phpdoc.<br><br>

            2. Scrutinizer har också möjligheten att peka ut och informera användaren om onödiga rader av kod i repo:t. I denna kodbasens analys av Scrutinizer, hittades många rader av kod som har gått oanvända i repot. Några exempel av detta är filen ApiRoute, som tidigare 
            undersöktes hur dess volym och komplexitet var för stor, innehåller "$chosen" och "$data", som enligt Scrutinizer är "dead and can be removed". Detta går att hitta i större grad i filer såsom CardGameController, vilket också hade väldigt stor volym. Denna filen 
            innehåller ett flertal "$data"-variabler (som för sig själva, sträcker sig några rader av kod), som är döda och kan plockas bort. Genom att göra detta hade man sparat volym och komplexitet, vilket hade gett testerna ett bättre resultat.<br><br>

            3. Scrutinizer kan även visa CRAP index för filer i repot. Under "Code", och sedan "Hot Spots", finns längst ner en lista med "Least tested PHP operations". Här går det att observera samma slutsats som PHPmetric kom fram till när det gäller klassen "CardGame". 
            Denna klassen har metoder som kräver en att skapa ett session, som inte gick att skapa under testernas gång. Därav är inte alla metoder testade i den klassen, Coverage går ner, och eftersom CRAP-indexet använder sig av complexity i jämförelse med coverage, och CardGame 
            är sämre på båda, blir CRAP-värdet sämre.
        </p>

        <div class="center">
            <a href="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/?branch=main" alt="Scrutinizer link">
                <img src="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/badges/quality-score.png?b=main" alt="Scrutinizer">
            </a><br>

            <a href="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/?branch=main" alt="Coverage link">
                <img src="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/badges/coverage.png?b=main" alt="coverage">
            </a><br>

            <a href="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/?branch=main" alt="Build link">
                <img src="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/badges/build.png?b=main" alt="build">
            </a><br>

            <a href="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/?branch=main" alt="Intelligence link">
                <img src="https://scrutinizer-ci.com/g/AndiDupa/mvc-report/badges/code-intelligence.svg?b=main" alt="intelligence">
            </a>
        </div><br>
    </article>

    <div class="center">
        <h2>Förbättringar</h2>
    </div>

    <article class="article">
        <p>
            1. Ett fel som har varit mycket uppenbart i denna analysen är hur pass komplex, och dåligt upplagt klasser och routes är. Genom att fixa till routes såsom ApiRoutes, och splittra upp koden, 
            blir volymen samt komplexiteten mindre.<br>

            2. Scrutinizer har uppmanat om att kolla igenom koden och radera eventuella döda variabler som inte används. Genom att göra detta kommer komplexiteten att minskas, och då har CRAP-värdet också chans 
            att bli bättre.<br>

            3. Genom att öka testfallen till metoder som inte testats, kommer coverage även att bli bättre, vilket kommer att bidra till ett bättre coverage-värde, samt ett bättre CRAP-värde.
        </p><br><br>

        <p>
            Efter att förbättringarna noterades, användes dem för att ändra koden. Inledningsvis, så fixades scrutinizer, eftersom de räknade med vendor vilen, vilket gav errors baserade på dependencies (som inte 
            skall räknas med). Efteråt, kunde scrutinizer visa de egenskapade filerna med errors. Dessa felen inkluderade många "döda" variabler och linjer av kod. Sådana fel betyder att koden inte behövs. Feles 
            fixades (förutom src/Kernel.php som fortfarande räknas med), och scrutinizers poäng gick från 6.65, till 9.97. Därefter påbörjades fixen på routsen som till exempel ApiRoute, som var alldeles för stor. 
            Den kortades ner till "ApiRoute", "ApiRouteCard", och "ApiRouteGame". Efter att dessa fixes gjordes, uppdaterades PHPmetrics, till att visa ny statistik. Nedanför är några exempel på förändringar:<br><br>
        </p>
            <li>Average LCOM: 1.78 --> 1.64 (~8.1% förändring)</li>
            <li>Average cyclomatic complexity: by class 5.62 --> 4.96 (~12.5% förändring)</li>
            <li>Average relative System complexity: 75.9 --> 67.7 (~11.4% förändring)</li>
            <li>ApiRoute Volume: 2041.05 --> 326.9</li>
            <li>CardGameController Volume: 1768,8 --> 1496.89</li><br><br>
        <p>
            Resultaten är annorlunda, ja, men det var trott att det skulle bli lite bättre. SLutsatsen var att för att få bättre CRAP score, till exempel, behövs det tester för CardGame:s metoder, vilket bör anropa session, 
            som inte gick. Därav är inte CRAP dramatiskt annorlunda, eftersom coverage inte är dramatiskt annorlunda. Att minska volymen på andra controllers var diskuterat, men blev eventuellt inte av, eftersom koden innuti 
            dem har att göra med själva kursmomentet de tillhör, och för många controllers i en map gör det mindre organiserat.
        </p>
    </article>

    <div class="center">
        <h2>Diskussion</h2>
    </div>

    <article class="article">
        <p>
            Ja, det går att jobba med kodkvalitet, "clean code", och med de 6 c:en i åtanke medans man arbetar med ett project, men, det är mycket man måste tänka på innan man börjar. Ett project som introducerar dessa vilkoren 
            alldeles för sent, riskerar att ändra för mycket, och haka sig på gammal kod, vilket försenar projektets framgång. Alternativt, om man istället börjar tidigt, så kommer man igång snabbare, men arbetet går långsammare. 
            Det gäller att ha en balans mellan hur mycket tid man lägger på clean code, jämfört med självaste ideen man har om hur koden skall fungera. Att använda clean code hjälper en att göra det till vana, men, för mycket fokus 
            på clean code över funktionalitet, leder till att projektet inte når den grad som originellt var planerad.<br>
            Avslutningsvis, går det att säga att clean code är viktigt för ens kodbas samt sättet man kodar. Det kan ställa till det i ens kod, men att lära sig det tidigt hjälper en bygga en mer konkret struktur för framtida projekt 
            och arbeten.
        </p><br><br>
    </article>
{% endblock %}
